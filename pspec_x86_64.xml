<PISI>
    <Source>
        <Name>perl-proc-processtable</Name>
        <Homepage>https://metacpan.org/pod/Proc::ProcessTable</Homepage>
        <Packager>
            <Name>Algent Albrahimi</Name>
            <Email>algent@protonmail.com</Email>
        </Packager>
        <License>GPL-2.0-or-later</License>
        <PartOf>programming.perl</PartOf>
        <Summary xml:lang="en">Proc::ProcessTable - Perl extension to access the unix process table</Summary>
        <Description xml:lang="en">Perl extension to access the unix process table. This module is a first crack at providing a consistent interface to Unix (and maybe other multitasking OS&apos;s) process table information. The impetus for this came about with my frustration at having to parse the output of various systems&apos; ps commands to check whether specific processes were running on different boxes at a larged mixed Unix site. The output format of ps was different on each OS, and sometimes changed with each new release of an OS. Also, running a ps subprocess from within a perl or shell script and parsing the output was not a very efficient or aesthetic way to do things.
</Description>
        <Archive type="binary" sha1sum="79eb0752a961b8e0d15c77d298c97498fbc89c5a">https://getsol.us/sources/README.Solus</Archive>
    </Source>
    <Package>
        <Name>perl-proc-processtable</Name>
        <Summary xml:lang="en">Proc::ProcessTable - Perl extension to access the unix process table</Summary>
        <Description xml:lang="en">Perl extension to access the unix process table. This module is a first crack at providing a consistent interface to Unix (and maybe other multitasking OS&apos;s) process table information. The impetus for this came about with my frustration at having to parse the output of various systems&apos; ps commands to check whether specific processes were running on different boxes at a larged mixed Unix site. The output format of ps was different on each OS, and sometimes changed with each new release of an OS. Also, running a ps subprocess from within a perl or shell script and parsing the output was not a very efficient or aesthetic way to do things.
</Description>
        <PartOf>programming.perl</PartOf>
        <Files>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/Proc/Killall.pm</Path>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/Proc/Killfam.pm</Path>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/Proc/ProcessTable.pm</Path>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/Proc/ProcessTable/Process.pm</Path>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/auto/Proc/ProcessTable/.packlist</Path>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/auto/Proc/ProcessTable/Process/autosplit.ix</Path>
            <Path fileType="library">/usr/lib64/perl5/vendor_perl/5.36/x86_64-linux-thread-multi/auto/Proc/ProcessTable/ProcessTable.so</Path>
            <Path fileType="man">/usr/share/man/man3/Proc::Killall.3</Path>
            <Path fileType="man">/usr/share/man/man3/Proc::Killfam.3</Path>
            <Path fileType="man">/usr/share/man/man3/Proc::ProcessTable.3</Path>
            <Path fileType="man">/usr/share/man/man3/Proc::ProcessTable::Process.3</Path>
        </Files>
    </Package>
    <History>
        <Update release="9">
            <Date>2022-09-25</Date>
            <Version>0.634</Version>
            <Comment>Packaging update</Comment>
            <Name>Algent Albrahimi</Name>
            <Email>algent@protonmail.com</Email>
        </Update>
    </History>
</PISI>